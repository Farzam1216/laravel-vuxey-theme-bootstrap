(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/filepond/plugins/filepond.filesizevalidation.min.js":
/*!******************************************************************************************!*\
  !*** ./resources/assets/vendor/libs/filepond/plugins/filepond.filesizevalidation.min.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * FilePondPluginFileValidateSize 2.2.5
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit https://pqina.nl/filepond/ for details.
 */
!function (global, factory) {
  "object" == ( false ? 0 : _typeof(exports)) && "undefined" != "object" ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function () {
  "use strict";

  var plugin = function plugin(_ref) {
      var addFilter = _ref.addFilter,
        utils = _ref.utils,
        Type = utils.Type,
        replaceInString = utils.replaceInString,
        toNaturalFileSize = utils.toNaturalFileSize;
      return addFilter("ALLOW_HOPPER_ITEM", function (file, _ref2) {
        var query = _ref2.query;
        if (!query("GET_ALLOW_FILE_SIZE_VALIDATION")) return !0;
        var sizeMax = query("GET_MAX_FILE_SIZE");
        if (null !== sizeMax && file.size >= sizeMax) return !1;
        var sizeMin = query("GET_MIN_FILE_SIZE");
        return !(null !== sizeMin && file.size <= sizeMin);
      }), addFilter("LOAD_FILE", function (file, _ref3) {
        var query = _ref3.query;
        return new Promise(function (resolve, reject) {
          if (!query("GET_ALLOW_FILE_SIZE_VALIDATION")) return resolve(file);
          var fileFilter = query("GET_FILE_VALIDATE_SIZE_FILTER");
          if (fileFilter && !fileFilter(file)) return resolve(file);
          var sizeMax = query("GET_MAX_FILE_SIZE");
          if (null !== sizeMax && file.size >= sizeMax) reject({
            status: {
              main: query("GET_LABEL_MAX_FILE_SIZE_EXCEEDED"),
              sub: replaceInString(query("GET_LABEL_MAX_FILE_SIZE"), {
                filesize: toNaturalFileSize(sizeMax, ".", query("GET_FILE_SIZE_BASE"), query("GET_FILE_SIZE_LABELS", query))
              })
            }
          });else {
            var sizeMin = query("GET_MIN_FILE_SIZE");
            if (null !== sizeMin && file.size <= sizeMin) reject({
              status: {
                main: query("GET_LABEL_MIN_FILE_SIZE_EXCEEDED"),
                sub: replaceInString(query("GET_LABEL_MIN_FILE_SIZE"), {
                  filesize: toNaturalFileSize(sizeMin, ".", query("GET_FILE_SIZE_BASE"), query("GET_FILE_SIZE_LABELS", query))
                })
              }
            });else {
              var totalSizeMax = query("GET_MAX_TOTAL_FILE_SIZE"),
                currentTotalSize;
              if (null !== totalSizeMax) if (query("GET_ACTIVE_ITEMS").reduce(function (total, item) {
                return total + item.fileSize;
              }, 0) > totalSizeMax) return void reject({
                status: {
                  main: query("GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED"),
                  sub: replaceInString(query("GET_LABEL_MAX_TOTAL_FILE_SIZE"), {
                    filesize: toNaturalFileSize(totalSizeMax, ".", query("GET_FILE_SIZE_BASE"), query("GET_FILE_SIZE_LABELS", query))
                  })
                }
              });
              resolve(file);
            }
          }
        });
      }), {
        options: {
          allowFileSizeValidation: [!0, Type.BOOLEAN],
          maxFileSize: [null, Type.INT],
          minFileSize: [null, Type.INT],
          maxTotalFileSize: [null, Type.INT],
          fileValidateSizeFilter: [null, Type.FUNCTION],
          labelMinFileSizeExceeded: ["File is too small", Type.STRING],
          labelMinFileSize: ["Minimum file size is {filesize}", Type.STRING],
          labelMaxFileSizeExceeded: ["File is too large", Type.STRING],
          labelMaxFileSize: ["Maximum file size is {filesize}", Type.STRING],
          labelMaxTotalFileSizeExceeded: ["Maximum total size exceeded", Type.STRING],
          labelMaxTotalFileSize: ["Maximum total file size is {filesize}", Type.STRING]
        }
      };
    },
    isBrowser;
  return "undefined" != typeof window && void 0 !== window.document && document.dispatchEvent(new CustomEvent("FilePond:pluginloaded", {
    detail: plugin
  })), plugin;
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/filepond/plugins/filepond.filesizevalidation.min.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});