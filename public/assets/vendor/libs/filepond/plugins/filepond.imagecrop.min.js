(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/filepond/plugins/filepond.imagecrop.min.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/vendor/libs/filepond/plugins/filepond.imagecrop.min.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * FilePondPluginImageCrop 2.0.6
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit https://pqina.nl/filepond/ for details.
 */
!function (global, factory) {
  "object" == ( false ? 0 : _typeof(exports)) && "undefined" != "object" ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function () {
  "use strict";

  var isImage = function isImage(file) {
      return /^image/.test(file.type);
    },
    plugin = function plugin(_ref) {
      var addFilter = _ref.addFilter,
        utils = _ref.utils,
        Type = utils.Type,
        isFile = utils.isFile,
        getNumericAspectRatioFromString = utils.getNumericAspectRatioFromString,
        allowCrop = function allowCrop(item, query) {
          return !(!isImage(item.file) || !query("GET_ALLOW_IMAGE_CROP"));
        },
        isObject = function isObject(value) {
          return "object" == _typeof(value);
        },
        isNumber = function isNumber(value) {
          return "number" == typeof value;
        },
        updateCrop = function updateCrop(item, obj) {
          return item.setMetadata("crop", Object.assign({}, item.getMetadata("crop"), obj));
        };
      return addFilter("DID_CREATE_ITEM", function (item, _ref2) {
        var query = _ref2.query;
        item.extend("setImageCrop", function (crop) {
          if (allowCrop(item, query) && isObject(center)) return item.setMetadata("crop", crop), crop;
        }), item.extend("setImageCropCenter", function (center) {
          if (allowCrop(item, query) && isObject(center)) return updateCrop(item, {
            center: center
          });
        }), item.extend("setImageCropZoom", function (zoom) {
          if (allowCrop(item, query) && isNumber(zoom)) return updateCrop(item, {
            zoom: Math.max(1, zoom)
          });
        }), item.extend("setImageCropRotation", function (rotation) {
          if (allowCrop(item, query) && isNumber(rotation)) return updateCrop(item, {
            rotation: rotation
          });
        }), item.extend("setImageCropFlip", function (flip) {
          if (allowCrop(item, query) && isObject(flip)) return updateCrop(item, {
            flip: flip
          });
        }), item.extend("setImageCropAspectRatio", function (newAspectRatio) {
          if (allowCrop(item, query) && void 0 !== newAspectRatio) {
            var currentCrop = item.getMetadata("crop"),
              aspectRatio = getNumericAspectRatioFromString(newAspectRatio),
              newCrop = {
                center: {
                  x: .5,
                  y: .5
                },
                flip: currentCrop ? Object.assign({}, currentCrop.flip) : {
                  horizontal: !1,
                  vertical: !1
                },
                rotation: 0,
                zoom: 1,
                aspectRatio: aspectRatio
              };
            return item.setMetadata("crop", newCrop), newCrop;
          }
        });
      }), addFilter("DID_LOAD_ITEM", function (item, _ref3) {
        var query = _ref3.query;
        return new Promise(function (resolve, reject) {
          var file = item.file,
            crop;
          if (!isFile(file) || !isImage(file) || !query("GET_ALLOW_IMAGE_CROP")) return resolve(item);
          if (item.getMetadata("crop")) return resolve(item);
          var humanAspectRatio = query("GET_IMAGE_CROP_ASPECT_RATIO");
          item.setMetadata("crop", {
            center: {
              x: .5,
              y: .5
            },
            flip: {
              horizontal: !1,
              vertical: !1
            },
            rotation: 0,
            zoom: 1,
            aspectRatio: humanAspectRatio ? getNumericAspectRatioFromString(humanAspectRatio) : null
          }), resolve(item);
        });
      }), {
        options: {
          allowImageCrop: [!0, Type.BOOLEAN],
          imageCropAspectRatio: [null, Type.STRING]
        }
      };
    },
    isBrowser;
  return "undefined" != typeof window && void 0 !== window.document && document.dispatchEvent(new CustomEvent("FilePond:pluginloaded", {
    detail: plugin
  })), plugin;
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/filepond/plugins/filepond.imagecrop.min.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});