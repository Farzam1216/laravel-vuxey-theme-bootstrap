(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/filepond/plugins/filepond.imagesizevalidation.min.js":
/*!*******************************************************************************************!*\
  !*** ./resources/assets/vendor/libs/filepond/plugins/filepond.imagesizevalidation.min.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * FilePondPluginImageValidateSize 1.2.7
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit https://pqina.nl/filepond/ for details.
 */
!function (global, factory) {
  "object" == ( false ? 0 : _typeof(exports)) && "undefined" != "object" ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function () {
  "use strict";

  var isImage = function isImage(file) {
      return /^image/.test(file.type);
    },
    getImageSize = function getImageSize(file) {
      return new Promise(function (resolve, reject) {
        var image = document.createElement("img");
        image.src = URL.createObjectURL(file), image.onerror = function (err) {
          clearInterval(intervalId), reject(err);
        };
        var intervalId = setInterval(function () {
          image.naturalWidth && image.naturalHeight && (clearInterval(intervalId), URL.revokeObjectURL(image.src), resolve({
            width: image.naturalWidth,
            height: image.naturalHeight
          }));
        }, 1);
      });
    },
    plugin = function plugin(_ref) {
      var addFilter = _ref.addFilter,
        utils = _ref.utils,
        Type = utils.Type,
        replaceInString = utils.replaceInString,
        isFile = utils.isFile,
        validateFile = function validateFile(file, bounds, measure) {
          return new Promise(function (resolve, reject) {
            var onReceiveSize = function onReceiveSize(_ref2) {
              var width = _ref2.width,
                height = _ref2.height,
                minWidth = bounds.minWidth,
                minHeight = bounds.minHeight,
                maxWidth = bounds.maxWidth,
                maxHeight = bounds.maxHeight,
                minResolution = bounds.minResolution,
                maxResolution = bounds.maxResolution,
                resolution = width * height;
              width < minWidth || height < minHeight ? reject("TOO_SMALL") : width > maxWidth || height > maxHeight ? reject("TOO_BIG") : null !== minResolution && resolution < minResolution ? reject("TOO_LOW_RES") : null !== maxResolution && resolution > maxResolution && reject("TOO_HIGH_RES"), resolve();
            };
            getImageSize(file).then(onReceiveSize)["catch"](function () {
              measure ? measure(file, bounds).then(onReceiveSize)["catch"](function () {
                return reject();
              }) : reject();
            });
          });
        };
      return addFilter("LOAD_FILE", function (file, _ref3) {
        var query = _ref3.query;
        return new Promise(function (resolve, reject) {
          if (isFile(file) && isImage(file) && query("GET_ALLOW_IMAGE_VALIDATE_SIZE")) {
            var bounds = {
                minWidth: query("GET_IMAGE_VALIDATE_SIZE_MIN_WIDTH"),
                minHeight: query("GET_IMAGE_VALIDATE_SIZE_MIN_HEIGHT"),
                maxWidth: query("GET_IMAGE_VALIDATE_SIZE_MAX_WIDTH"),
                maxHeight: query("GET_IMAGE_VALIDATE_SIZE_MAX_HEIGHT"),
                minResolution: query("GET_IMAGE_VALIDATE_SIZE_MIN_RESOLUTION"),
                maxResolution: query("GET_IMAGE_VALIDATE_SIZE_MAX_RESOLUTION")
              },
              measure = query("GET_IMAGE_VALIDATE_SIZE_MEASURE");
            validateFile(file, bounds, measure).then(function () {
              resolve(file);
            })["catch"](function (error) {
              var status = error ? {
                TOO_SMALL: {
                  label: query("GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_SIZE_TOO_SMALL"),
                  details: query("GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MIN_SIZE")
                },
                TOO_BIG: {
                  label: query("GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_SIZE_TOO_BIG"),
                  details: query("GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MAX_SIZE")
                },
                TOO_LOW_RES: {
                  label: query("GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_RESOLUTION_TOO_LOW"),
                  details: query("GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MIN_RESOLUTION")
                },
                TOO_HIGH_RES: {
                  label: query("GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_RESOLUTION_TOO_HIGH"),
                  details: query("GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MAX_RESOLUTION")
                }
              }[error] : {
                label: query("GET_IMAGE_VALIDATE_SIZE_LABEL_FORMAT_ERROR"),
                details: file.type
              };
              reject({
                status: {
                  main: status.label,
                  sub: error ? replaceInString(status.details, bounds) : status.details
                }
              });
            });
          } else resolve(file);
        });
      }), {
        options: {
          allowImageValidateSize: [!0, Type.BOOLEAN],
          imageValidateSizeLabelFormatError: ["Image type not supported", Type.STRING],
          imageValidateSizeMeasure: [null, Type.FUNCTION],
          imageValidateSizeMinResolution: [null, Type.INT],
          imageValidateSizeMaxResolution: [null, Type.INT],
          imageValidateSizeLabelImageResolutionTooLow: ["Resolution is too low", Type.STRING],
          imageValidateSizeLabelImageResolutionTooHigh: ["Resolution is too high", Type.STRING],
          imageValidateSizeLabelExpectedMinResolution: ["Minimum resolution is {minResolution}", Type.STRING],
          imageValidateSizeLabelExpectedMaxResolution: ["Maximum resolution is {maxResolution}", Type.STRING],
          imageValidateSizeMinWidth: [1, Type.INT],
          imageValidateSizeMinHeight: [1, Type.INT],
          imageValidateSizeMaxWidth: [65535, Type.INT],
          imageValidateSizeMaxHeight: [65535, Type.INT],
          imageValidateSizeLabelImageSizeTooSmall: ["Image is too small", Type.STRING],
          imageValidateSizeLabelImageSizeTooBig: ["Image is too big", Type.STRING],
          imageValidateSizeLabelExpectedMinSize: ["Minimum size is {minWidth} × {minHeight}", Type.STRING],
          imageValidateSizeLabelExpectedMaxSize: ["Maximum size is {maxWidth} × {maxHeight}", Type.STRING]
        }
      };
    },
    isBrowser;
  return "undefined" != typeof window && void 0 !== window.document && document.dispatchEvent(new CustomEvent("FilePond:pluginloaded", {
    detail: plugin
  })), plugin;
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/filepond/plugins/filepond.imagesizevalidation.min.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});